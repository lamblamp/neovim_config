
[[plugins]]
repo = 'jacoborus/tender.vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'pepo-le/win-ime-con.nvim'


[[plugins]]
repo = 'tpope/vim-surround'


[[plugins]]
repo = 'schickling/vim-bufonly'
hook_add = '''
nnoremap <silent> <Leader>oo :BufOnly<CR>
'''


[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
'''


[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
nnoremap <silent> <Leader>df :<C-u>Denite file/rec -split=floating<CR> " カレントディレクトのファイル
nnoremap <silent> <Leader>dg :<C-u>Denite grep<CR>                     "
nnoremap <silent> <Leader>dt :<C-u>Denite filetype -split=floating<CR> " ファイルタイプを変更したいとき
nnoremap <silent> <Leader>db :<C-u>Denite buffer -split=floating<CR>   " バッファ一覧
nnoremap <silent> <Leader>dr :<C-u>Denite register -split=floating<CR> " レジスタ
nnoremap <silent> <Leader>dl :<C-u>Denite line<CR>                     " ？

" Deniteバッファでのキー設定
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
        \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
        \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
        \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
        \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
        \ denite#do_map('toggle_select').'j'
endfunction
'''


[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
hook_add = '''
"nnoremap <silent> <Leader>ff :<C-u>Defx -listed -resume<CR>
nnoremap <silent> <Leader>ff :<C-u>Defx -new `expand('%:p:h')` -search=`expand('%:p')`<CR>
nnoremap <silent> <Leader>fi :<C-u>Defx -split=vertical -winwidth=50 -direction=topleft<CR>
"nnoremap <silent> <Leader>fs :<C-u>Defx -new `expand('%:p:h')` -search=`expand('%:p')`<CR>

autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
" 移動
nnoremap <silent><buffer><expr> h    defx#do_action('cd', ['..'])
nnoremap <silent><buffer><expr> j    line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k    line('.') == 1 ? 'G' : 'k'
nnoremap <silent><buffer><expr> l    defx#do_action('open')
nnoremap <silent><buffer><expr> ~    defx#do_action('cd')
" 編集
nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
nnoremap <silent><buffer><expr> e    defx#do_action('open')
nnoremap <silent><buffer><expr> K    defx#do_action('new_directory')
nnoremap <silent><buffer><expr> N    defx#do_action('new_file')
nnoremap <silent><buffer><expr> yy   defx#do_action('yank_path')
" 表示
nnoremap <silent><buffer><expr> .    defx#do_action('toggle_ignored_files')
nnoremap <silent><buffer><expr> i    defx#do_action('search')
nnoremap <silent><buffer><expr> q    defx#do_action('quit')
nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
" 検索
nnoremap <silent><buffer><expr> gr    defx#do_action('call', 'DefxDeniteGrep')
endfunction


function! DefxDeniteGrep(context) abort
  let dirpath = fnamemodify(a:context.targets[0], ':p:h')
  exec 'cd ' . expand(dirpath)
  exec 'Denite grep'
endfunction


call denite#custom#var('file/rec', 'command',
	\ ['rg', '--files', '--glob', '!.git', '--color', 'never'])
call denite#custom#var('grep', {
	\ 'command': ['rg'],
	\ 'default_opts': ['-i', '--vimgrep', '--no-heading'],
	\ 'recursive_opts': [],
	\ 'pattern_opt': ['--regexp'],
	\ 'separator': ['--'],
	\ 'final_opts': [],
	\ })

'''


[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
call deoplete#enable()
" 改行での動作
imap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
let g:cache_completed = {}
function! s:my_cr_function() abort
  if has_key(v:completed_item, 'word') && g:cache_completed != v:completed_item
    let g:cache_completed = v:completed_item
    return deoplete#close_popup()
  else
    return deoplete#close_popup() . "\<CR>"
  endif
endfunction
" TABでの動作
inoremap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" Shift-TABでの動作
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
" insertモードではC-qでdeoplateを綴じる
inoremap <expr><C-q> pumvisible() ? deoplete#close_popup() : "\<C-q>"
'''


[[plugins]]
repo = 'mechatroner/rainbow_csv'
