
[[plugins]]
repo = 'pepo-le/win-ime-con.nvim'


[[plugins]]
repo = 'raphamorim/lucario'
[[plugins]]
repo = 'junegunn/seoul256.vim'
[[plugins]]
repo = 'jacoborus/tender.vim'


[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'schickling/vim-bufonly'
hook_add = '''
nnoremap <silent> <Leader>oo :BufOnly<CR>
'''


[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
  \ 'active': {
  \   'left': [
  \     ['mode', 'paste'],
  \     ['readonly', 'filename', 'modified'],
  \     ['ale'],
  \   ]
  \ },
  \ 'component_function': {
  \   'ale': 'ALEStatus'
  \ }
  \}

function! ALEStatus() abort
  let l:count = ale#statusline#Count(bufnr(''))
  let l:errors = l:count.error + l:count.style_error
  let l:warnings = l:count.warning + l:count.style_warning
  return l:count.total == 0 ? 'ALE: OK' : 'ALE: 〆:' . l:errors . ' ' . '〓:' . l:warnings
endfunction
'''


[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
nnoremap <silent> <Leader>df :<C-u>Denite file/rec -split=floating<CR>   " カレントディレクトリのファイル
nnoremap <silent> <Leader>dg :<C-u>Denite grep<CR>       "
nnoremap <silent> <Leader>dt :<C-u>Denite file/type<CR>  " ？
nnoremap <silent> <Leader>db :<C-u>Denite buffer -split=floating<CR>     " バッファの一覧
nnoremap <silent> <Leader>dl :<C-u>Denite line<CR>       " ？

" Deniteバッファでのキー設定
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
        \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
        \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
        \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
        \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
        \ denite#do_map('toggle_select').'j'
endfunction
" Denite-filterバッファでのキー設定
autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
endfunction
'''


[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
hook_add = '''
nnoremap <silent> <Leader>ff :<C-u>Defx -listed -resume <CR>
nnoremap <silent> <Leader>fi :<C-u>Defx -split=vertical -winwidth=50 -direction=topleft<CR>

autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
" 移動
nnoremap <silent><buffer><expr> h    defx#do_action('cd', ['..'])
nnoremap <silent><buffer><expr> j    line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k    line('.') == 1 ? 'G' : 'k'
nnoremap <silent><buffer><expr> l    defx#do_action('open')
nnoremap <silent><buffer><expr> ~    defx#do_action('cd')
" 編集
nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
nnoremap <silent><buffer><expr> c    defx#do_action('copy')
nnoremap <silent><buffer><expr> m    defx#do_action('move')
nnoremap <silent><buffer><expr> p    defx#do_action('paste')
nnoremap <silent><buffer><expr> e    defx#do_action('open')
nnoremap <silent><buffer><expr> K    defx#do_action('new_directory')
nnoremap <silent><buffer><expr> N    defx#do_action('new_file')
nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
nnoremap <silent><buffer><expr> *    defx#do_action('toggle_select_all')
" 表示
nnoremap <silent><buffer><expr> .    defx#do_action('toggle_ignored_files')
nnoremap <silent><buffer><expr> q    defx#do_action('quit')

"nnoremap <silent><buffer><expr> E    defx#do_action('open', 'vsplit')
"nnoremap <silent><buffer><expr> P    defx#do_action('preview')
"nnoremap <silent><buffer><expr> o    defx#do_action('open_tree', 'toggle')
"nnoremap <silent><buffer><expr> M    defx#do_action('new_multiple_files')
"nnoremap <silent><buffer><expr> C    defx#do_action('toggle_columns','mark:indent:icon:filename:type:size:time')
"nnoremap <silent><buffer><expr> S    defx#do_action('toggle_sort', 'time')
"nnoremap <silent><buffer><expr> d    defx#do_action('remove')
"nnoremap <silent><buffer><expr> r    defx#do_action('rename')
"nnoremap <silent><buffer><expr> !    defx#do_action('execute_command')
"nnoremap <silent><buffer><expr> x    defx#do_action('execute_system')
"nnoremap <silent><buffer><expr> yy   defx#do_action('yank_path')
"nnoremap <silent><buffer><expr> ;    defx#do_action('repeat')
"nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
"nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
"nnoremap <silent><buffer><expr> cd    defx#do_action('change_vim_cwd')
nnoremap <silent><buffer><expr> <S-l>  defx#do_action('open_directory', 'u:\')
endfunction
'''


[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
call deoplete#enable()
" 改行での動作
imap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
let g:cache_completed = {}
function! s:my_cr_function() abort
  if has_key(v:completed_item, 'word') && g:cache_completed != v:completed_item
    let g:cache_completed = v:completed_item
    return deoplete#close_popup()
  else
    return deoplete#close_popup() . "\<CR>"
  endif
endfunction
" TABでの動作
inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ deoplete#manual_complete()
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction
" Shift-TABでの動作
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
'''


[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
let g:ale_linters = {
      \ 'javascript': ['eslint'],
      \ }
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_save = 1
let g:ale_lint_on_enter = 1
let g:ale_sign_column_always = 1
let g:ale_sign_error = '〆'
let g:ale_sign_warning = '〓'
let g:ale_set_loclist = 1
let g:ale_open_list = 1
let g:ale_list_window_size = 3
let g:ale_set_highlights = 0

nnoremap <silent> <C-.> :ALENextWrap<CR>
nnoremap <silent> <C-,> :ALEPreviousWrap<CR>
nnoremap <silent> <C-c> :lclose<CR>
nnoremap <silent> <Leader>ll :ALEResetBuffer<CR>
nnoremap <silent> <Leader>kk :ALELint<CR>

augroup CloseLoclistWindowGroup
  autocmd!
  autocmd QuitPre * if empty(&buftype) | lclose | endif
augroup END
'''
